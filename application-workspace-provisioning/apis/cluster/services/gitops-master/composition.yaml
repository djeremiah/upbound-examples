apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xservicesgitops.aws.caas.upbound.io
  labels:
    type: gitops-master
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: aws.caas.upbound.io/v1alpha1
    kind: XServices
  resources:
  - name: argocd
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      spec:
        forProvider:
          namespace: argocd
          chart:
            name: argo-cd
            repository: https://argoproj.github.io/argo-helm
          values:
            configs:
              cm:
                application.resourceTrackingMethod: annotation
            server:
              ingress:
                enabled: true
                annotations:
                  alb.ingress.kubernetes.io/backend-protocol: HTTPS
                  alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
                  alb.ingress.kubernetes.io/scheme: internet-facing
                  alb.ingress.kubernetes.io/target-type: ip
                hosts:
                - argocd.opendev.ie
                ingressClassName: alb
              ingressGrpc:
                enabled: true
                isAWSALB: true
                awsALB:
                  serviceType: ClusterIP
    patches: 
    - fromFieldPath: spec.providerConfigRef.name
      toFieldPath: spec.providerConfigRef.name
  - name: kyverno
    base: 
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      spec:
        forProvider:
          namespace: kyverno
          chart:
            name: kyverno
            repository: https://kyverno.github.io/kyverno
    patches:
    - fromFieldPath: spec.providerConfigRef.name 
      toFieldPath: spec.providerConfigRef.name
  - name: kyverno-gen-policy
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec: 
        forProvider: 
          manifest: 
            apiVersion: kyverno.io/v1
            kind: ClusterPolicy
            metadata:
              name: argo-cluster-generation-from-kubeconfig-secret
              annotations:
                policies.kyverno.io/title: Argo Cluster Secret Generation From Kubeconfig secrets
                policies.kyverno.io/category: Argo
                policies.kyverno.io/severity: medium
                policies.kyverno.io/subject: Secret
                kyverno.io/kyverno-version: 1.7.1
                policies.kyverno.io/minversion: 1.7.0
                kyverno.io/kubernetes-version: "1.23"
                policies.kyverno.io/description: >-
                  This policy generates and synchronizes Argo CD cluster secrets from Kubeconfig secrets.
            spec:
              generateExistingOnPolicyUpdate: true
              rules:
                - name: source-secret
                  match:
                    all:
                      - resources:
                          kinds:
                            - v1/Secret
                          names:
                            - "*-kubeconfig"
                  context:
                    - name: clusterName
                      variable:
                        value: "{{ request.object.metadata.name | replace_all(@, '-kubeconfig', '')}}"
                        jmesPath: 'to_string(@)'
                    - name: metadataLabels
                      variable:
                        value:
                          argocd.argoproj.io/secret-type: cluster
                          clusterId: "{{ clusterName }}"
                    - name: kubeconfigData
                      variable:
                        jmesPath: 'request.object.data.kubeconfig | to_string(@)'
                    - name: serverName
                      variable:
                        value: "{{ kubeconfigData | base64_decode(@) | parse_yaml(@).clusters[0].cluster.server }}"
                        jmesPath: 'to_string(@)'
                    - name: bearerToken
                      variable:
                        value: "{{ kubeconfigData | base64_decode(@) | parse_yaml(@).users[0].user.token }}"
                        jmesPath: 'to_string(@)'
                    - name: caData
                      variable:
                        value: "{{ kubeconfigData | base64_decode(@) | parse_yaml(@).clusters[0].cluster.\"certificate-authority-data\" }}"
                        jmesPath: 'to_string(@)'
                    - name: dataConfig
                      variable:
                        value: |
                          {
                            "bearerToken": "{{ bearerToken }}",
                            "tlsClientConfig": {
                              "insecure": false,
                              "caData": "{{ caData }}"
                            }
                          }
                        jmesPath: 'to_string(@)'
                  generate:
                    synchronize: true
                    apiVersion: v1
                    kind: Secret
                    name: "{{ clusterName }}"
                    namespace: argocd
                    data:
                      metadata:
                        labels:
                            "{{ metadataLabels }}"
                      type: Opaque
                      data:
                        name: "{{ clusterName | base64_encode(@) }}"
                        server: "{{ serverName | base64_encode(@) }}"
                        config: "{{ dataConfig | base64_encode(@) }}"
    patches:
    - fromFieldPath: spec.providerConfigRef.name 
      toFieldPath: spec.providerConfigRef.name